summarise(sum_case = sum(case),
population = mean(Population, na.rm = T),
.groups = "drop") %>%
mutate(rate = (sum_case / population)) %>%
ggplot(aes(days, rate, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Rate",
title = "Change in the rate by country")
# calculate rate of cases (cases/population) by country and day
tab_change_rate <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case),
population = mean(Population, na.rm = T),
.groups = "drop") %>%
mutate(rate = (sum_case / population)) %>%
ggplot(aes(days, rate, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Rate",
title = "Change in the rate by country")
tab_change_rate
# calculate rate of cases (cases/population) by country and day
tab_change_rate <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case),
population = mean(Population, na.rm = T),
.groups = "drop") %>%
mutate(rate = (sum_case / population)) %>%
ggplot(aes(days, rate, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Rate",
title = "Change in the rate by country")
tab_change_rate
library(broom)
library(texreg)
?ml_linear_regression
# log number of cases
model %>%
ml_linear_regression(log(case) ~ as.factor(Country_Region) + Population + days)
# log number of cases
covid %>%
ml_linear_regression(log(case) ~ as.factor(Country_Region) + Population + days)
# log number of cases
covid %>%
ml_linear_regression(log(case) ~ as.factor(Country_Region) + Population + days) %>%
summary()
sparklyr
sparklyr
# load sparklyr
library(sparklyr)
# log number of cases
covid %>%
ml_linear_regression(log(case) ~ as.factor(Country_Region) + Population + days) %>%
summary()
# log case
covid <- covid %>%
mutate(log_case = log(case))
covid
# log number of cases
covid %>%
ml_linear_regression(log_case ~ as.factor(Country_Region) + Population + days) %>%
summary()
# log number of cases
covid %>%
ml_linear_regression(log_case ~ factor(Country_Region) + Population + days) %>%
summary()
sparklyr::spark_last_error()
knitr::opts_chunk$set(echo = TRUE)
# library
library(tidyr)
library(lubridate)
library(tidyverse)
library(broom)
library(texreg)
# install
#spark_install(version = "3.5.1")
# load sparklyr
library(sparklyr)
# check Java version
system("java -version")
# check sparklyr version
packageVersion("sparklyr")
# check available Spark versions
spark_installed_versions()
count_city_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
timeseries_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read.csv(timeseries_github_url)
# drop columns that are in timeseries
count_city <- select(count_city, -Province_State, -Country_Region, -Lat, -Long_)
count_city
# change timeseries data to longer format
timeseries_long <- timeseries %>%
pivot_longer(
cols = !c(Province.State, Country.Region, Lat, Long),
names_to = "time",
values_to = "case"
)
# change time to month-day-year format
timeseries_long$date <- gsub("^X", "", timeseries_long$time)
timeseries_long$date <- mdy(timeseries_long$date)
# create another variable (number of days since the start of the data collection)
start_date <- min(timeseries_long$date)
timeseries_long <- timeseries_long %>%
mutate(days = as.numeric(date - start_date))
# create combined key
timeseries_long$Combined_Key <- ifelse(is.na(timeseries_long$Province.State) | timeseries_long$Province.State == "",
timeseries_long$Country.Region,
paste(timeseries_long$Province.State, timeseries_long$Country.Region, sep = ", "))
# set up a local Spark connection
sc <- spark_connect(master = "local")
# copying datasets into Spark
city <- copy_to(sc, count_city, overwrite = TRUE)
time <- copy_to(sc, timeseries_long, overwrite = TRUE)
# merging data
covid_full <- time %>%
left_join(city, by = "Combined_Key")
covid_full
# selected countries
sel_countries <- c("Germany", "China", "Japan", "United Kingdom", "Brazil", "Mexico")
covid <- covid_full %>%
filter(Country_Region %in% sel_countries)
covid
# calculate the number of cases by country and day
tab_change_case <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case)) %>%
ggplot(aes(days, sum_case, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Number of cases",
title = "Change in the number of cases")
tab_change_case
# calculate rate of cases (cases/population) by country and day
tab_change_rate <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case),
population = mean(Population, na.rm = T),
.groups = "drop") %>%
mutate(rate = (sum_case / population)) %>%
ggplot(aes(days, rate, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Rate",
title = "Change in the rate by country")
tab_change_rate
# log case
covid <- covid %>%
mutate(log_case = log(case))
# log number of cases
covid %>%
ml_linear_regression(log_case ~ factor(Country_Region) + Population + days) %>%
summary()
sparklyr::spark_last_error()
covid %>%
ml_linear_regression(log_case ~ as.factor(Country_Region) + Population + days) %>%
summary()
covid %>%
ml_linear_regression(log_case ~ as.factor(Country_Region) + Population + days)
covid %>%
ml_linear_regression(sc, log_case ~ factor(Country_Region) + Population + days)
ml_linear_regression(covid, log_case ~ factor(Country_Region) + Population + days)
covid <- copy_to(sc, covid, overwrite = TRUE)
covid %>%
ml_linear_regression(covid, log_case ~ factor(Country_Region) + Population + days)
?ml_linear_regression
str(sc)
# log case
covid <- covid %>%
mutate(log_case = log(case))
# log number of cases
model <- covid %>%
ml_linea
# log case
covid <- covid %>%
mutate(log_case = log(case))
# log number of cases
covid %>%
ml_linear_regression(covid, log_case ~ factor(Country_Region) + Population + days)
covid
covid
summary(covid$log_case)
# log case
covid <- covid %>%
mutate(log_case = log(case+`))
# log case
covid <- covid %>%
mutate(log_case = log(case+`))
# log case
covid <- covid %>%
mutate(log_case = log(case+1))
covid
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ factor(Country_Region) + Population + days)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Population)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ days)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Population)
covid
covid(Population)
covid$Population
# log case
covid <- covid %>%
mutate(log_case = log(case+1))
covid
# log case
covid <- covid %>%
mutate(log_case = log(case))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Population)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ days)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ factor(Country_Region))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region)
# log case
covid <- covid %>%
mutate(log_case = log(case+1))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ factor(Country_Region))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ days)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region)
summary(model)
timeseries_long
count_city
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days, na.rm = T)
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days, na.rm = TRUE)
# log case
covid <- covid %>%
mutate(log_case = log(case+1)) %>%
filter(!is.na(Population))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days)
summary(model)
# regression model table
texreg(model)
# regression model table
texreg(model, caption = "Output from regression model")
# log case and remove NA in Population variable
covid <- covid %>%
mutate(log_case = log(case)) %>%
filter(!is.na(Population))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days)
summary(model)
# coefficients
coeff <- tidy(model)
coeff
kable(coeff)
library(knitr)
kable(coeff)
# get two data sets from github
count_city_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csvraw=true"
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
count_city <- read_csv(count_city_github_url)
timeseries_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read_csv(timeseries_github_url)
count_city <- read.csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
# library
library(tidyr)
library(lubridate)
library(tidyverse)
library(broom)
library(texreg)
library(knitr)
library(ggplot2)
library(dplyr)
library(haven)
#spark_install(version = "3.5.1")
library(sparklyr)
# check Java version
system("java -version")
# check sparklyr version
packageVersion("sparklyr")
# check available Spark versions
spark_installed_versions()
# get two data sets from github
count_city_github_url <- "https://github.com/CSSEGISandData/COVID-19/blob/4360e50239b4eb6b22f3a1759323748f36752177/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read_csv(count_city_github_url)
timeseries_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read_csv(timeseries_github_url)
# get two data sets from github
count_city_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
timeseries_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read.csv(timeseries_github_url)
tab_change_case <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case, na.rm = TRUE),
.groups = "drop")
# get two data sets from github
count_city_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
timeseries_github_url <- "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read.csv(timeseries_github_url)
# drop columns that are in timeseries
count_city <- select(count_city, -Province_State, -Country_Region, -Lat, -Long_)
# change timeseries data to longer format
timeseries_long <- timeseries %>%
pivot_longer(
cols = !c(Province.State, Country.Region, Lat, Long),
names_to = "time",
values_to = "case"
)
# change time to month-day-year format
timeseries_long$date <- gsub("^X", "", timeseries_long$time)
timeseries_long$date <- mdy(timeseries_long$date)
# create another variable (number of days since the start of the data collection)
start_date <- min(timeseries_long$date)
timeseries_long <- timeseries_long %>%
mutate(days = as.numeric(date - start_date))
# create combined key
timeseries_long$Combined_Key <- ifelse(is.na(timeseries_long$Province.State) | timeseries_long$Province.State == "",
timeseries_long$Country.Region,
paste(timeseries_long$Province.State, timeseries_long$Country.Region, sep = ", "))
count_city
timeseries_long
# set up a local Spark connection
sc <- spark_connect(master = "local")
# copying datasets into Spark
city <- copy_to(sc, count_city, overwrite = TRUE)
time <- copy_to(sc, timeseries_long, overwrite = TRUE)
# merging data
covid_full <- time %>%
left_join(city, by = "Combined_Key")
# selected countries
sel_countries <- c("Germany", "China", "Japan", "United Kingdom", "Brazil", "Mexico")
covid <- covid_full %>%
filter(Country_Region %in% sel_countries)
tab_change_case <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case, na.rm = TRUE),
.groups = "drop")
tab_change_case
ggplot(aes(days, sum_case, data=tab_change_case, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Number of cases",
title = "Change in the number of cases")
ggplot(data=tab_change_case, aes(days, sum_case, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Number of cases",
title = "Change in the number of cases")
tab_change_case
# calculate rate of cases (cases/population) by country and day
tab_change_rate <- covid %>%
group_by(Country_Region, days) %>%
summarise(sum_case = sum(case, na.rm = TRUE),
population = mean(Population, na.rm = T),
.groups = "drop") %>%
mutate(rate = (sum_case / population))
tab_change_rate
ggplot(data=tab_change_rate, aes(days, rate, color = Country_Region)) +
geom_line() +
theme_bw() +
labs(x = "Time",
y = "Rate",
title = "Change in the rate by country")
tab_change_case
tab_change_rate
# log case and remove NA in Population variable
covid <- covid %>%
mutate(log_case = log(case+1)) %>%
filter(!is.na(Population))
# log number of cases
model <- ml_linear_regression(covid, log_case ~ Country_Region + Population + days)
# coefficients
coeff <- tidy(model)
kable(coeff, caption = "Coefficients of regression model")
# set up a local Spark connection
sc <- spark_connect(master = "local")
# copying datasets into Spark
city <- copy_to(sc, count_city, overwrite = TRUE)
time <- copy_to(sc, timeseries_long, overwrite = TRUE)
# merging data
covid_full <- time %>%
left_join(city, by = "Combined_Key")
# selected countries
sel_countries <- c("Germany", "China", "Japan", "United Kingdom", "US", "Brazil", "Mexico")
covid <- covid_full %>%
filter(Country_Region %in% sel_countries)
head(count_city)
head(timeseries_long)
git config pull.rebase false
git add/rm <file>
knitr::opts_chunk$set(echo = TRUE)
# save original dataset locally
save(covid, file = "data/covid.csv")
# library
library(tidyr)
library(lubridate)
library(tidyverse)
library(broom)
library(texreg)
library(knitr)
library(ggplot2)
library(dplyr)
library(haven)
#spark_install(version = "3.5.1")
library(sparklyr)
# check Java version
system("java -version")
# check sparklyr version
packageVersion("sparklyr")
# check available Spark versions
spark_installed_versions()
# get two data sets from github
count_city_github_url <-
"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv?raw=true"
count_city <- read.csv(count_city_github_url)
timeseries_github_url <-
"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv?raw=true"
timeseries <- read.csv(timeseries_github_url)
# drop columns that are in timeseries
count_city <- select(count_city, -Province_State, -Country_Region, -Lat, -Long_)
# change timeseries data to longer format
timeseries_long <- timeseries %>%
pivot_longer(
cols = !c(Province.State, Country.Region, Lat, Long),
names_to = "time",
values_to = "case"
)
# change time to month-day-year format
timeseries_long$date <- gsub("^X", "", timeseries_long$time)
timeseries_long$date <- mdy(timeseries_long$date)
# create another variable (number of days since the start of the data collection)
start_date <- min(timeseries_long$date)
timeseries_long <- timeseries_long %>%
mutate(days = as.numeric(date - start_date))
# create combined key
timeseries_long$Combined_Key <-
ifelse(is.na(timeseries_long$Province.State) | timeseries_long$Province.State == "",
timeseries_long$Country.Region,
paste(timeseries_long$Province.State, timeseries_long$Country.Region, sep = ", "))
head(count_city)
head(timeseries_long)
# set up a local Spark connection
sc <- spark_connect(master = "local")
# copying datasets into Spark
city <- copy_to(sc, count_city, overwrite = TRUE)
time <- copy_to(sc, timeseries_long, overwrite = TRUE)
# merging data
covid_full <- time %>%
left_join(city, by = "Combined_Key")
# selected countries
sel_countries <- c("Germany", "China", "Japan", "United Kingdom", "US", "Brazil", "Mexico")
covid <- covid_full %>%
filter(Country_Region %in% sel_countries)
# save original dataset locally
save(covid, file = "data/covid.csv")
